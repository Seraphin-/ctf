# trip (rev 395)
# weird TSP, annoying challenge...
# flag{r3v_a1g0_cl0s3_3n0ugh_3293011594}

m = [[753, 8162, 966, 8341, 980, 1500, 77, 966, 7308, 372, 4326, 9038, 726, 9430, 333], [410, 2574, 2437, 6532, 788, 242, 9622, 102, 911, 905, 875, 328, 953, 5501, 5941], [9095, 85, 511, 434, 4958, 2190, 482, 945, 114, 912, 922, 4044, 616, 70, 539], [839, 180, 198, 995, 7151, 1941, 650, 3351, 154, 292, 403, 279, 270, 4953, 108], [6932, 658, 474, 350, 7883, 779, 643, 5473, 6742, 363, 309, 825, 780, 2015, 446], [3513, 7711, 3491, 621, 7294, 15, 6563, 4190, 5487, 8027, 126, 623, 7846, 306, 155], [9896, 830, 569, 391, 3449, 1170, 5082, 7035, 682, 832, 3273, 47, 9587, 720, 4603], [651, 4317, 235, 914, 3989, 8365, 6015, 6035, 85, 629, 842, 4055, 3272, 3484, 9495], [8468, 62, 680, 5938, 443, 368, 4370, 916, 866, 9227, 8164, 868, 4948, 6888, 7863], [483, 5412, 894, 2128, 898, 8788, 976, 171, 466, 5868, 392, 154, 7256, 391, 5326], [9504, 324, 965, 62, 9627, 5319, 4618, 803, 431, 7679, 339, 529, 517, 5923, 525], [6056, 7461, 1692, 249, 787, 5258, 782, 3129, 958, 6490, 3927, 3068, 479, 4553, 103], [9302, 251, 9511, 5496, 120, 6370, 866, 8780, 799, 3699, 175, 4916, 6503, 1695, 3114], [21, 5639, 7543, 6146, 9792, 1016, 7657, 8461, 163, 136, 2183, 337, 4453, 131, 8538], [1387, 296, 619, 6983, 4606, 594, 18, 107, 4985, 6694, 797, 4299, 521, 2093, 701]]
g = DiGraph(matrix(m), format='adjacency_matrix')
#print(g.adjacency_matrix())
#dist, pred = g.shortest_path_all_pairs(by_weight=True, algorithm='Floyd-Warshall_Boost', 
#    weight_function=lambda p: m[p[0]][p[1]])
dist, pred = ({0: {0: 0, 1: 481, 2: 569, 3: 373, 4: 723, 5: 723, 6: 77, 7: 334, 8: 419, 9: 372, 10: 764, 11: 124, 12: 603, 13: 639, 14: 227}, 1: {0: 410, 1: 0, 2: 337, 3: 430, 4: 630, 5: 242, 6: 415, 7: 102, 8: 187, 9: 543, 10: 368, 11: 328, 12: 700, 13: 407, 14: 397}, 2: {0: 91, 1: 85, 2: 0, 3: 434, 4: 557, 5: 327, 6: 168, 7: 187, 8: 114, 9: 206, 10: 453, 11: 215, 12: 616, 13: 70, 14: 318}, 3: {0: 289, 1: 180, 2: 198, 3: 0, 4: 390, 5: 422, 6: 126, 7: 215, 8: 154, 9: 292, 10: 403, 11: 173, 12: 270, 13: 268, 14: 108}, 4: {0: 565, 1: 530, 2: 474, 3: 350, 4: 0, 5: 772, 6: 464, 7: 534, 8: 504, 9: 363, 10: 309, 11: 511, 12: 620, 13: 544, 14: 446}, 5: {0: 327, 1: 368, 2: 386, 3: 188, 4: 578, 5: 0, 6: 173, 7: 262, 8: 342, 9: 442, 10: 126, 11: 220, 12: 458, 13: 306, 14: 155}, 6: {0: 583, 1: 404, 2: 492, 3: 296, 4: 646, 5: 646, 6: 0, 7: 257, 8: 342, 9: 588, 10: 699, 11: 47, 12: 526, 13: 562, 14: 150}, 7: {0: 326, 1: 147, 2: 235, 3: 577, 4: 528, 5: 389, 6: 403, 7: 0, 8: 85, 9: 441, 10: 515, 11: 450, 12: 847, 13: 305, 14: 544}, 8: {0: 472, 1: 62, 2: 399, 3: 492, 4: 443, 5: 304, 6: 477, 7: 164, 8: 0, 9: 605, 10: 430, 11: 390, 12: 762, 13: 469, 14: 459}, 9: {0: 412, 1: 318, 2: 406, 3: 403, 4: 699, 5: 560, 6: 275, 7: 171, 8: 256, 9: 0, 10: 392, 11: 154, 12: 633, 13: 391, 14: 257}, 10: {0: 351, 1: 242, 2: 260, 3: 62, 4: 452, 5: 484, 6: 188, 7: 277, 8: 216, 9: 354, 10: 0, 11: 235, 12: 332, 13: 330, 14: 170}, 11: {0: 536, 1: 357, 2: 445, 3: 249, 4: 599, 5: 599, 6: 121, 7: 210, 8: 295, 9: 541, 10: 652, 11: 0, 12: 479, 13: 515, 14: 103}, 12: {0: 526, 1: 251, 2: 435, 3: 237, 4: 120, 5: 493, 6: 363, 7: 353, 8: 391, 9: 483, 10: 175, 11: 410, 12: 0, 13: 505, 14: 345}, 13: {0: 21, 1: 225, 2: 542, 3: 394, 4: 606, 5: 467, 6: 98, 7: 307, 8: 163, 9: 136, 10: 528, 11: 145, 12: 624, 13: 0, 14: 248}, 14: {0: 433, 1: 254, 2: 342, 3: 314, 4: 635, 5: 496, 6: 18, 7: 107, 8: 192, 9: 548, 10: 622, 11: 65, 12: 521, 13: 412, 14: 0}}, {0: {0: None, 6: 0, 9: 0, 5: 1, 13: 2, 11: 6, 2: 7, 8: 7, 1: 8, 10: 9, 3: 11, 12: 11, 14: 11, 4: 12, 7: 14}, 1: {1: None, 0: 1, 5: 1, 7: 1, 11: 1, 13: 2, 12: 3, 10: 5, 14: 5, 2: 7, 8: 7, 4: 8, 3: 10, 9: 13, 6: 14}, 2: {2: None, 6: 0, 5: 1, 7: 1, 1: 2, 3: 2, 8: 2, 12: 2, 13: 2, 10: 5, 11: 6, 4: 8, 14: 11, 0: 13, 9: 13}, 3: {3: None, 5: 1, 13: 2, 1: 3, 2: 3, 8: 3, 9: 3, 10: 3, 12: 3, 14: 3, 11: 6, 4: 12, 0: 13, 6: 14, 7: 14}, 4: {4: None, 5: 1, 13: 2, 1: 3, 8: 3, 12: 3, 2: 4, 3: 4, 9: 4, 10: 4, 14: 4, 11: 6, 7: 9, 0: 13, 6: 14}, 5: {5: None, 1: 3, 2: 3, 8: 3, 12: 3, 10: 5, 13: 5, 14: 5, 11: 6, 3: 10, 4: 12, 0: 13, 9: 13, 6: 14, 7: 14}, 6: {6: None, 5: 1, 13: 2, 9: 3, 10: 3, 11: 6, 2: 7, 8: 7, 1: 8, 3: 11, 12: 11, 14: 11, 4: 12, 0: 13, 7: 14}, 7: {7: None, 6: 0, 5: 1, 13: 2, 12: 3, 10: 5, 14: 5, 11: 6, 2: 7, 8: 7, 1: 8, 4: 8, 3: 10, 0: 13, 9: 13}, 8: {8: None, 0: 1, 5: 1, 7: 1, 11: 1, 13: 2, 12: 3, 10: 5, 14: 5, 2: 7, 1: 8, 4: 8, 3: 10, 9: 13, 6: 14}, 9: {9: None, 5: 1, 2: 7, 8: 7, 1: 8, 4: 8, 7: 9, 10: 9, 11: 9, 13: 9, 3: 11, 12: 11, 14: 11, 0: 13, 6: 14}, 10: {10: None, 5: 1, 13: 2, 1: 3, 2: 3, 8: 3, 9: 3, 12: 3, 14: 3, 11: 6, 3: 10, 4: 12, 0: 13, 6: 14, 7: 14}, 11: {11: None, 5: 1, 13: 2, 9: 3, 10: 3, 2: 7, 8: 7, 1: 8, 3: 11, 12: 11, 14: 11, 4: 12, 0: 13, 6: 14, 7: 14}, 12: {12: None, 5: 1, 7: 1, 13: 2, 2: 3, 8: 3, 14: 3, 9: 4, 11: 6, 3: 10, 1: 12, 4: 12, 10: 12, 0: 13, 6: 14}, 13: {13: None, 6: 0, 5: 1, 11: 6, 2: 7, 1: 8, 4: 8, 7: 9, 10: 9, 3: 11, 12: 11, 14: 11, 0: 13, 8: 13, 9: 13}, 14: {14: None, 5: 1, 13: 2, 10: 5, 11: 6, 2: 7, 8: 7, 1: 8, 4: 8, 3: 11, 0: 13, 9: 13, 6: 14, 7: 14, 12: 14}})

"""
m_aug = [[dist[u][v] for v in range(len(m))] for u in range(len(m))]
G = DiGraph(matrix(m_aug), format='adjacency_matrix')
print(G.adjacency_matrix())
C = G.traveling_salesman_problem().all_simple_cycles()
print(C)
"""

#"""
import random
w = 3000
s0 = False
s1 = False
while w > 2400:
    # print('a')
    seen = set(range(1, 15))
    now = 0
    path = []
    while len(seen) > 0:
        nxt = random.choice(list(seen))
        seen.remove(nxt)
        end = nxt
        t_path = []
        while end != now:
            end = pred[now][end]
            if end in seen:
                seen.remove(end)
            t_path.append(end)
        path += t_path[::-1]
        now = nxt
        # print(now)
    # path.append(now)
    # path = path[:-1]
    end = 0
    t_path = []
    while end != now:
        end = pred[now][end]
        t_path.append(end)

    path += t_path[::-1]
    path.append(0)


    w = 0
    for i in range(len(path)-1):
        w += m[path[i]][path[i+1]]

print(path, len(path), w)
print(len(set(path)))
